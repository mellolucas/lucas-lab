name: Dispatch Test
run-name: >-
  ${{ github.workflow }}
  ${{ format('(1:{0}; 2:{1};)', inputs.first-input, inputs.second-input) }}

on:
  workflow_dispatch:
    inputs:
      break:
        description: "Break the workflow"
        required: false
        type: boolean
        default: false
      first-input:
        description: "My first input"
        required: false
        type: string
      second-input:
        description: "My second input"
        required: false
        type: string
      package-manager:
        description: |
          Node.js package manager to handle dependencies, scripts, and caching.
          Examples: `npm`, `yarn`, `pnpm`, etc.
          If unset, attempts to detect from lock files, falling back to `npm`.
        required: false
        type: string

env:
  FIRST_INPUT: ${{ inputs.first-input }}
  SECOND_INPUT: ${{ inputs.second-input }}
  PACKAGE_MANAGERS: >-
    {
      "pnpm": {
        "name": "pnpm",
        "lockfile": "pnpm-lock.yaml"
      },
      "yarn": {
        "name": "yarn",
        "lockfile": "yarn.lock"
      },
      "npm": {
        "name": "npm",
        "lockfile": "package-lock.json"
      },
      "default": {
        "name": "npm",
        "lockfile": "package-lock.json"
      }
    }

jobs:
  test-dispatch:
    runs-on: ubuntu-latest

    steps:
      - name: Print context
        env:
          GH_CONTEXT: ${{ toJSON(github) }}
          GH_INPUTS: ${{ toJSON(inputs) }}
          GH_RUNNER: ${{ toJSON(runner) }}
        run: |
          echo "::group::Inputs toJSON (raw block deserialized):"
          jq . <<< "${GH_INPUTS}"
          echo "::endgroup::"
          echo
          echo "---"
          echo
          echo "::group::GitHub context toJSON:"
          jq . <<< "${GH_CONTEXT}"
          echo "::endgroup::"
          echo
          echo "---"
          echo
          echo "::group::Runner context toJSON:"
          jq . <<< "${GH_RUNNER}"
          echo "::endgroup::"
          echo

      - name: Create lockfile
        run: |
          echo '${{ toJSON(fromJSON(env.PACKAGE_MANAGERS)) }}' | jq .
          echo ${{ fromJSON(env.PACKAGE_MANAGERS)[format('{0}', inputs.first-input || 'default')].lockfile }}
          echo [[ -n "${{ inputs.first-input }}" ]] && \
            touch "${{ fromJSON(env.PACKAGE_MANAGERS)[format('{0}', inputs.first-input)].lockfile }}" || \
            echo "No lockfile created because no package manager specified in 'first-input'."

      - name: Run test
        env: 
          TEST: >-
            {
              "pnpm": {
                "name": "pnpm",
                "lockfile": "pnpm-lock.yaml",
                "hash": "${{ hashFiles('**/pnpm-lock.yaml') || 0 }}"
              },
              "yarn": {
                "name": "yarn",
                "lockfile": "yarn.lock",
                "hash": "${{ hashFiles('**/yarn.lock') || 0 }}"
              },
              "npm": {
                "name": "npm",
                "lockfile": "package-lock.json",
                "hash": "${{ hashFiles('**/package-lock.json') || 0 }}"
              },
              "default": {
                "name": "npm",
                "lockfile": "package-lock.json",
                "hash": "${{ hashFiles('**/package-lock.json') || 0 }}"
              },
              "selected": {
                "name": "${{ fromJSON(env.PACKAGE_MANAGERS)[format('{0}', inputs.first-input || 'default')].name || 0 }}",
                "lockfile": "${{ fromJSON(env.PACKAGE_MANAGERS)[format('{0}', inputs.first-input || 'default')].lockfile || 0 }}",
                "hash": "${{ hashFiles(fromJSON(env.PACKAGE_MANAGERS)[format('{0}', inputs.first-input || 'default')].lockfile) || 0 }}"
              }
            }
          TEST_DYNAMIC_SUBSET: "${{ fromJSON(env.PACKAGE_MANAGERS)[format('default{0}', inputs.first-input || 'name')] }}"
          TEST_COMBINATION: >-
            ${{ format('pm:hash;pm==x:hash!=0: {0}:{1};{2}:{3} | {0}:{4};{5}:{6} | {0}:{7};{8}:{9}',
              inputs.package-manager,

              hashFiles('**/pnpm-lock.yaml'),
              inputs.package-manager == 'pnpm',
              hashFiles('**/pnpm-lock.yaml') != 0,

              hashFiles('**/yarn.lock'),
              inputs.package-manager == 'yarn',
              hashFiles('**/yarn.lock') != 0,

              hashFiles('**/package-lock.json'),
              inputs.package-manager == 'npm',
              hashFiles('**/package-lock.json') != 0
            ) }}
          DETECT_PM_SINGLE_SHOT_EXTRA: &package_manager >-
            ${{
              ( 
                inputs.package-manager == 'pnpm' || 
                ( inputs.package-manager == 0 && hashFiles('**/pnpm-lock.yaml') != 0 ) 
              ) && 
                format('{{"name":"{0}","lockfile":"{1}","hash":"{2}"}}',
                  'pnpm',
                  'pnpm-lock.yaml',
                  hashFiles('**/pnpm-lock.yaml') || 0
                ) ||
                ( 
                  inputs.package-manager == 'yarn' || 
                  ( inputs.package-manager == 0 && hashFiles('**/yarn.lock') != 0 ) 
                ) && 
                  format('{{"name":"{0}","lockfile":"{1}","hash":"{2}"}}',
                    'yarn',
                    'yarn.lock',
                    hashFiles('**/yarn.lock') || 0
                  ) ||
                format('{{"name":"{0}","lockfile":"{1}","hash":"{2}"}}',
                  'npm',
                  'package-lock.json',
                  hashFiles('**/package-lock.json') || 0
                )
            }}

        # env:
        #   PACKAGE_MANAGER: >-
        #     ${{ 
        #       fromJSON(env.PACKAGE_MANAGERS)[
        #         inputs.package-manager ||
        #         hashFiles(fromJSON(env.PACKAGE_MANAGERS)

                
        #     }}
          
        run: |
          ${{ inputs.break == 1 && true || false }} && exit 1 || true
          echo
          echo "---      ---      ---"
          declare -a arr_keys arr_values
          declare -A arr
          read -ra arr_keys <<< "${{ join(fromJSON(env.TEST).*.name, ' ') }}"
          read -ra arr_values <<< "${{ join(fromJSON(env.TEST).*.hash, ' ') }}"
          if [ ${#arr_keys[@]} -ne ${#arr_values[@]} ]; then
            echo "::error::Array lengths do not match!"
            exit 1
          fi
          arr=()
          for i in "${!arr_keys[@]}"; do
            arr["${arr_keys[i]}"]="${arr_values[i]}"
          done
          echo "Constructed associative array:"
          for key in "${!arr[@]}"; do
            echo "  $key: ${arr[$key]}"
          done
          echo
          for i in "${!arr_keys[@]}"; do
          if [ "${arr_values[i]}" != "0" ]; then
            arr["detected"]="${arr_keys[i]}"
            break
          fi
          done
          echo "Detected package manager: ${arr["detected"]}"
          echo

      - name: Test anchor
        env: 
          PACKAGE_MANAGER: *package_manager
        run: |
          echo "Reusing anchored TEST env var:"
          echo "Now, test if oneshot hash is truthy: '${{ fromJSON(env.PACKAGE_MANAGER).hash != 0 && 'it isnt' || 'it is' }}'"
          
