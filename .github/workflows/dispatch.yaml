name: Dispatch Test
run-name: >-
  ${{ github.workflow }}
  ${{ format('(1:{0}; 2:{1};)', inputs.first-input, inputs.second-input) }}

on:
  workflow_dispatch:
    inputs:
      break:
        description: "Break the workflow"
        required: false
        type: boolean
        default: false
      first-input:
        description: "My first input"
        required: false
        type: string
      second-input:
        description: "My second input"
        required: false
        type: string
      package-manager:
        description: |
          Node.js package manager to handle dependencies, scripts, and caching.
          Examples: `npm`, `yarn`, `pnpm`, etc.
          If unset, attempts to detect from lock files, falling back to `npm`.
        required: false
        type: string

env:
  FIRST_INPUT: ${{ inputs.first-input }}
  SECOND_INPUT: ${{ inputs.second-input }}
  PACKAGE_MANAGERS: >-
    {
      "pnpm": {
        "name": "pnpm",
        "lockfile": "pnpm-lock.yaml"
      },
      "yarn": {
        "name": "yarn",
        "lockfile": "yarn.lock"
      },
      "npm": {
        "name": "npm",
        "lockfile": "package-lock.json"
      },
      "default": {
        "name": "npm",
        "lockfile": "package-lock.json"
      }
    }

jobs:
  test-dispatch:
    runs-on: ubuntu-latest

    steps:
      - name: Print context
        env:
          GH_CONTEXT: ${{ toJSON(github) }}
          GH_INPUTS: ${{ toJSON(inputs) }}
          GH_RUNNER: ${{ toJSON(runner) }}
        run: |
          echo "::group::Inputs toJSON (raw block deserialized):"
          jq . <<< "${GH_INPUTS}"
          echo "::endgroup::"
          echo
          echo "---"
          echo
          echo "::group::GitHub context toJSON:"
          jq . <<< "${GH_CONTEXT}"
          echo "::endgroup::"
          echo
          echo "---"
          echo
          echo "::group::Runner context toJSON:"
          jq . <<< "${GH_RUNNER}"
          echo "::endgroup::"
          echo

      - name: Create lockfile
        run: |
          echo "my fake lockfile content" > ${{ fromJSON(env.PACKAGE_MANAGERS)[inputs.first-input || 'default'].lockfile }}

      - name: Run test
        env:
          TEST: >-
            {
              "pnpm": {
                "name": "pnpm",
                "lockfile": "pnpm-lock.yaml",
                "hash": ${{ hashFiles('**/pnpm-lock.yaml') }}
              },
              "yarn": {
                "name": "yarn",
                "lockfile": "yarn.lock",
                "hash": ${{ hashFiles('**/yarn.lock') }}
              },
              "npm": {
                "name": "npm",
                "lockfile": "package-lock.json",
                "hash": ${{ hashFiles('**/package-lock.json') }}
              },
              "default": {
                "name": "npm",
                "lockfile": "package-lock.json",
                "hash": ${{ hashFiles('**/package-lock.json') }}
              }
            }

        # env:
        #   PACKAGE_MANAGER: >-
        #     ${{ 
        #       fromJSON(env.PACKAGE_MANAGERS)[
        #         inputs.package-manager ||
        #         hashFiles(fromJSON(env.PACKAGE_MANAGERS)

                
        #     }}
          
        run: |
          echo
          echo
          echo "---      ---      ---"
          ${{ inputs.break == 1 && true || false }} && exit 1 || true
          TEST_ARRAY=(${{ inputs.package-manager || join(env.TEST.*.hash, ' ') }})
          echo "TEST_ARRAY: ${TEST_ARRAY[@]}"
          echo "TEST_ARRAY length: ${#TEST_ARRAY[@]}"
          echo "TEST_ARRAY[0]: ${TEST_ARRAY[0]}"
          echo "TEST_ARRAY[1]: ${TEST_ARRAY[1]}"






